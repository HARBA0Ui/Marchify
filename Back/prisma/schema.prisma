generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  VENDEUR
  LIVREUR
  ADMIN
}

enum CmdStatus {
  PENDING
  PROCESSING
  READY
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum UniteMesure {
  GRAMME
  KILOGRAMME
  LITRE
  MILLILITRE
  PIECE
  BOITE
  SAC
  CARTON
  METRE
  CENTIMETRE
  AUTRE
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  nom          String
  prenom       String
  email        String   @unique
  PWD          String
  role         UserRole
  telephone    String
  adresse      Json
  localisation Json?

  vendeur   Vendeur?
  livreur   Livreur?
  commandes Commande[]

  @@map("users")
}

model Vendeur {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  boutiques Boutique[]

  @@map("vendeurs")
}

model Livreur {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  localisation Json?
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique @db.ObjectId

  @@map("livreurs")
}

model Boutique {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  nom          String
  adresse      String
  localisation Json?
  categorie    String
  telephone    String

  vendeur   Vendeur    @relation(fields: [vendeurId], references: [id], onDelete: Cascade)
  vendeurId String     @db.ObjectId
  produits  Produit[]
  commandes Commande[]

  @@map("boutiques")
}

model Produit {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  nom                String
  prix               Float
  categorie          String
  description        String
  image              String
  quantite           Int
  unite              UniteMesure @default(KILOGRAMME)
  unitePersonnalisee String?
  livrable           Boolean     @default(true)

  boutique   Boutique          @relation(fields: [boutiqueId], references: [id], onDelete: Cascade)
  boutiqueId String            @db.ObjectId
  commandes  CommandeProduit[]

  @@map("produits")
}

model Commande {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  status           CmdStatus @default(PENDING)
  adresseLivraison Json
  totalCommande    Float
  dateCommande     DateTime  @default(now())

  client     User              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String            @db.ObjectId
  boutique   Boutique?         @relation(fields: [boutiqueId], references: [id], onDelete: Cascade)
  boutiqueId String?           @db.ObjectId
  produits   CommandeProduit[]

  @@map("commandes")
}

model CommandeProduit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantite  Int      @default(1)
  prixTotal Float
  dateAjout DateTime @default(now()) 
  dateModif DateTime @updatedAt 

  commande   Commande @relation(fields: [commandeId], references: [id], onDelete: Cascade)
  commandeId String   @db.ObjectId
  produit    Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  produitId  String   @db.ObjectId

  @@unique([commandeId, produitId])
  @@map("commande_produits")
}
